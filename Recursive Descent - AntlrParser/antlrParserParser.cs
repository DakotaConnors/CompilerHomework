//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from antlrParser.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class antlrParserParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OPTIONAL_EOL=1, EOL=2, LINE=3, OPERATOR=4, ID=5, NUMBER=6, OPTIONAL_WS=7;
	public const int
		RULE_prog = 0;
	public static readonly string[] ruleNames = {
		"prog"
	};

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "OPTIONAL_EOL", "EOL", "LINE", "OPERATOR", "ID", "NUMBER", "OPTIONAL_WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "antlrParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static antlrParserParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public antlrParserParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public antlrParserParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ProgContext : ParserRuleContext {
		public ITerminalNode[] OPTIONAL_EOL() { return GetTokens(antlrParserParser.OPTIONAL_EOL); }
		public ITerminalNode OPTIONAL_EOL(int i) {
			return GetToken(antlrParserParser.OPTIONAL_EOL, i);
		}
		public ITerminalNode[] LINE() { return GetTokens(antlrParserParser.LINE); }
		public ITerminalNode LINE(int i) {
			return GetToken(antlrParserParser.LINE, i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			IantlrParserListener typedListener = listener as IantlrParserListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IantlrParserListener typedListener = listener as IantlrParserListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LINE) {
				{
				{
				State = 3;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 2; Match(LINE);
					}
					}
					State = 5;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==LINE );
				State = 7; Match(OPTIONAL_EOL);
				}
				}
				State = 12;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\t', '\x10', '\x4', '\x2', '\t', '\x2', '\x3', '\x2', 
		'\x6', '\x2', '\x6', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\a', '\x3', 
		'\x2', '\a', '\x2', '\v', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\xE', 
		'\v', '\x2', '\x3', '\x2', '\x2', '\x2', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x10', '\x2', '\f', '\x3', '\x2', '\x2', '\x2', '\x4', '\x6', '\a', '\x5', 
		'\x2', '\x2', '\x5', '\x4', '\x3', '\x2', '\x2', '\x2', '\x6', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\a', '\x5', '\x3', '\x2', '\x2', '\x2', '\a', '\b', 
		'\x3', '\x2', '\x2', '\x2', '\b', '\t', '\x3', '\x2', '\x2', '\x2', '\t', 
		'\v', '\a', '\x3', '\x2', '\x2', '\n', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\v', '\xE', '\x3', '\x2', '\x2', '\x2', '\f', '\n', '\x3', '\x2', '\x2', 
		'\x2', '\f', '\r', '\x3', '\x2', '\x2', '\x2', '\r', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '\f', '\x3', '\x2', '\x2', '\x2', '\x4', '\a', '\f',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
